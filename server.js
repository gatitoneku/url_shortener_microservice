 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
require('dotenv').config();
var randomGenerator = require('./randomGenerator');

//Mongoose stuff
var mongoose = require('mongoose');
mongoose.connect(process.env.DBURL, {useMongoClient: true});
var Schema = mongoose.Schema;
var linkSchema = new Schema({
    origURL: String,
    shortURL: String  
});
var Link = mongoose.model('Link', linkSchema);

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}

app.use('/public', express.static(process.cwd() + '/public'));

app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
  
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })

function generateAndCheckDupes(){
    var linkId = randomGenerator.randomString();
    
    Link.find({shortURL: linkId}, function(err, link){
        if (err) throw err;
        if(Object.keys(link).length!==0){
            generateAndCheckDupes()}
    });
    return linkId;
}

//New short link generation
app.route('/new/')
    .get(function(req, res){
    console.log(req.query['url']);
    var linkId = generateAndCheckDupes();
    
    var doc = {origURL:decodeURIComponent(req.query['url']), 
               shortURL:linkId }
    var newlink = new Link(doc);
    newlink.save(function(err, link){
        if (err) throw err;
        console.log(link);
        res.end("Your shortened link is http://sun-jury.glitch.me/"+link.shortURL);
    });
})

//Redirection
app.route('/:shorturl')
    .get(function(req, res){
     var expression = /(:\/\/)/g;
     var regex = new RegExp(expression);
     var resultArray = [];
     Link.findOne({shortURL: req.params.shorturl}, function(err, link){
         if (err) throw err;
         console.log(link);
     }).then(function(link){
         //if doesn't have http, append it
         if(link.origURL.match(regex)) {
            res.redirect(link.origURL);
         }
         else{
            res.redirect('http://'+link.origURL);
         }
         ;
     });
    }) 


// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
  console.log(process.env.PORT);
  
});


